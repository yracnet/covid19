{"version":3,"sources":["CovidService.js","CovidFilter.js","CovidGraph.js","Manager.js","serviceWorker.js","index.js"],"names":["String","prototype","format","i","args","arguments","this","replace","Array","last","length","config","timeseries","mapper","csv","split","map","it","array","labels","slice","Date","moment","forEach","name","result","filter","reduce","a","b","c","parseInt","unshift","includes","values","line","label","checked","fetchTimeLine","type","success","error","title","url","fetch","then","response","text","matrix","model","catch","CovidFilter","countries","times","from","onChangeFrom","onChangeCheck","onChangeType","onClickReset","useState","setFilter","filterCountries","toUpperCase","className","colSpan","defaultValue","onChange","value","key","onClick","e","currentTarget","event","index","colors","CovidGraph","start","indexOf","data","datasets","fill","borderColor","backgroundColor","Manager","props","state","bind","reloadGraph","element","setState","forceUpdate","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7805081d.chunk.js","sourcesContent":["import moment from \"moment\";\n\nString.prototype.format = function() {\n  var i = 0,\n    args = arguments;\n  return this.replace(/{}/g, function() {\n    return typeof args[i] != \"undefined\" ? args[i++] : \"\";\n  });\n};\nArray.prototype.last = function() {\n  return this[this.length - 1];\n};\n\nconst config = {\n  timeseries:\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-{}.csv\"\n};\n\nconst mapper = {\n  csvToMatrix: function(csv) {\n    return csv.split(\"\\n\").map(it => it.split(\",\"));\n  },\n  matrixToModel: function(array) {\n    let labels = array[0]\n      .slice(4)\n      .map(it => new Date(it))\n      .map(it => moment(it))\n      .map(it => it.format(\"YYYY-MM-DD\"));\n    array = array.slice(1);\n\n    // grupo US y CHINA\n    [\"China\", \"US\"].forEach(name => {\n      let result = array\n        .filter(it => it[1] === name)\n        .reduce((a, b) => {\n          let c = [...b];\n          if (a.length === 0) {\n            return c;\n          }\n          c[0] = \"SUMATORIA\";\n          for (let i = 4; i < b.length; i++) {\n            c[i] = parseInt(c[i]) + parseInt(a[i]);\n          }\n          return c;\n        }, []);\n      array.unshift(result);\n    });\n    //grupo UE\n\n    let result = array\n      .filter(it =>\n        [\n          \"Spain\",\n          \"France\",\n          \"Italy\",\n          \"Germany\",\n          \"Portugal\",\n          \"Austria\",\n          \"Belgium\",\n          \"Netherlands\"\n        ].includes(it[1])\n      )\n      .reduce((a, b) => {\n        let c = [...b];\n        if (a.length === 0) {\n          return c;\n        }\n        c[1] = \"UE - Parcial\";\n        c[0] = \"SUMATORIA\";\n        for (let i = 4; i < b.length; i++) {\n          c[i] = parseInt(c[i]) + parseInt(a[i]);\n        }\n        return c;\n      }, []);\n    array.unshift(result);\n\n    let values = array.map(line => ({\n      label: line[1] + (line[0] ? \" / \" + line[0] : \"\"),\n      checked: false,\n      last: line.last(),\n      values: line.slice(4)\n    }));\n\n    return {\n      labels,\n      values\n    };\n  }\n};\n\nlet fetchTimeLine = function(type, success, error) {\n  success = success ? success : () => {};\n  error = error ? error : () => {};\n  let result = {\n    title: \"TimeLine for \" + type,\n    url: config.timeseries.format(type)\n  };\n  fetch(result.url)\n    .then(response => response.text())\n    .then(text => mapper.csvToMatrix(text))\n    .then(matrix => mapper.matrixToModel(matrix))\n    .then(model => {\n      return { ...result, ...model };\n    })\n    .then(success)\n    .catch(error);\n};\n//let data = {\n//  confirmed: service.getTimeLineModel(\"Confirmed\"),\n//  deaths: service.getTimeLineModel(\"Deaths\"),\n//  recovered: service.getTimeLineModel(\"Recovered\")\n//};\n//console.log(\"data:::::::::::\", data);\n\nexport { fetchTimeLine };\n","import React, { useState } from \"react\";\n\nfunction CovidFilter({\n  countries,\n  times,\n  type,\n  from,\n  onChangeFrom,\n  onChangeCheck,\n  onChangeType,\n  onClickReset\n}) {\n  let [filter, setFilter] = useState(\"\");\n  let onChangeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n  let filterCountries = countries || [];\n  if (filter) {\n    filterCountries = filterCountries.filter(it => {\n      let label = it.label || \"\";\n      label = label.toUpperCase();\n      return label.includes(filter.toUpperCase());\n    });\n  }\n\n  return (\n    <div className=\"list-group\">\n      <table className=\"table table-responsive table-sm\">\n        <thead>\n          <tr>\n            <th>Mode</th>\n            <th colSpan=\"2\">\n              <select\n                name=\"type\"\n                className=\"form-control form-control-sm\"\n                defaultValue={type}\n                onChange={onChangeType}\n              >\n                <option value=\"Confirmed\">Confirmed</option>\n                <option value=\"Deaths\">Deaths</option>\n                <option value=\"Recovered\">Recovered</option>\n              </select>\n            </th>\n          </tr>\n          <tr>\n            <th>From</th>\n            <th colSpan=\"2\">\n              <div className=\"input-group\">\n                <select\n                  name=\"type\"\n                  className=\"form-control form-control-sm\"\n                  value={from}\n                  onChange={onChangeFrom}\n                >\n                  {times.map(it => (\n                    <option key={it} value={it}>\n                      {it}\n                    </option>\n                  ))}\n                </select>\n                <div className=\"input-group-append\">\n                  <button\n                    className=\"btn btn-sm btn-danger\"\n                    type=\"button\"\n                    onClick={e => {\n                      e.currentTarget.value = times[0];\n                      onChangeFrom(e);\n                    }}\n                  >\n                    Clear\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n          <tr>\n            <th>View</th>\n            <th colSpan=\"2\">\n              <div className=\"input-group\">\n                <input\n                  name=\"filter\"\n                  className=\"form-control form-control-sm\"\n                  type=\"text\"\n                  defaultValue={filter}\n                  onChange={onChangeFilter}\n                />\n                <div className=\"input-group-append\">\n                  <button\n                    className=\"btn btn-sm btn-danger\"\n                    type=\"button\"\n                    onClick={onClickReset}\n                  >\n                    Clear\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {filterCountries.map((it, index) => (\n            <tr key={it.label}>\n              <th>\n                <input\n                  name={it.label}\n                  type=\"checkbox\"\n                  checked={it.checked}\n                  onChange={onChangeCheck}\n                />\n              </th>\n              <td>{it.label}</td>\n              <td>\n                <span className=\"badge badge-danger\">{it.last}</span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default CovidFilter;\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n//const data = {\n//  labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n//  datasets: [\n//    {\n//      label: \"My First dataset\",\n//      fill: false,\n//      lineTension: 0.1,\n//      backgroundColor: \"rgba(75,192,192,0.4)\",\n//      borderColor: \"rgba(75,192,192,1)\",\n//      borderCapStyle: \"butt\",\n//      borderDash: [],\n//      borderDashOffset: 0.0,\n//      borderJoinStyle: \"miter\",\n//      pointBorderColor: \"rgba(75,192,192,1)\",\n//      pointBackgroundColor: \"#fff\",\n//      pointBorderWidth: 1,\n//      pointHoverRadius: 5,\n//      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n//      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n//      pointHoverBorderWidth: 2,\n//      pointRadius: 1,\n//      pointHitRadius: 10,\n//      data: [65, 59, 80, 81, 56, 55, 40]\n//    }\n//  ]\n//};\nconst colors = [\n  \"#FF6384\",\n  \"#36A2EB\",\n  \"#FFCE56\",\n  \"#fdfd98\",\n  \"#85a8ba\",\n  \"#eee0c9\",\n  \"#f1f0e8\",\n  \"#b29dd9\",\n  \"#fe6b64\",\n  \"#77dd77\",\n  \"#779ecb\",\n  \"#90c978\",\n  \"#83c6dd\",\n  \"#5db1d1\",\n  \"#98e690\",\n  \"#ebceed\",\n  \"#afd5aa\",\n  \"#d9ffff\"\n];\n\nfunction CovidGraph({ values, times, from }) {\n  let start = 0;\n  if (from) {\n    start = times.indexOf(from);\n  }\n\n  let data = {\n    labels: times.slice(start)\n  };\n  data.datasets = values\n    .filter(it => it.checked)\n    .map((it, i) => ({\n      label: it.label,\n      data: it.values.slice(start),\n      fill: false,\n      borderColor: colors[i % colors.length],\n      backgroundColor: colors[i % colors.length]\n    }));\n\n  return (\n    <div>\n      <Line data={data} />\n    </div>\n  );\n}\n\nexport default CovidGraph;\n","import React from \"react\";\nimport { fetchTimeLine } from \"./CovidService\";\nimport CovidFilter from \"./CovidFilter\";\nimport CovidGraph from \"./CovidGraph\";\nimport \"./Manager.scss\";\n\nclass Manager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: \"Confirmed\",\n      from: \"2020-01-01\",\n      times: [\"01\", \"02\", \"03\", \"04\", \"05\"],\n      countries: [\n        { label: \"line 1\", checked: true, values: [5, 15, 2, 30, 5] },\n        { label: \"line 2\", checked: true, values: [50, 5, 20, 30, 50] }\n      ]\n    };\n    this.onChangeCheck = this.onChangeCheck.bind(this);\n    this.onChangeFrom = this.onChangeFrom.bind(this);\n    this.onChangeType = this.onChangeType.bind(this);\n    this.onClickReset = this.onClickReset.bind(this);\n    this.reloadGraph = this.reloadGraph.bind(this);\n  }\n\n  onChangeCheck(event) {\n    let { countries } = this.state;\n    let element = event.currentTarget;\n    countries\n      .filter(it => it.label === element.name)\n      .forEach(it => (it.checked = element.checked));\n    this.setState({ countries });\n  }\n\n  onChangeType(event) {\n    let type = event.currentTarget.value;\n    this.setState({ type });\n    this.reloadGraph();\n  }\n\n  onChangeFrom(event) {\n    let from = event.currentTarget.value;\n    this.setState({ from });\n  }\n\n  onClickReset() {\n    let { countries } = this.state;\n    countries.forEach(it => {\n      it.checked = false;\n    });\n    this.setState({ countries });\n  }\n  componentDidMount() {\n    let state = this.state;\n    fetchTimeLine(state.type, data => {\n      state.times = data.labels;\n      state.countries = data.values;\n      state.from = \"2020-03-10\";\n      state.countries\n        .filter(it => it.label === \"Bolivia\")\n        .forEach(it => {\n          it.checked = true;\n        });\n      this.setState(state);\n    });\n  }\n  componentDidUpdate() {}\n  reloadGraph() {\n    let state = this.state;\n    fetchTimeLine(state.type, data => {\n      state.times = data.labels;\n      state.countries = data.values;\n      this.setState(state);\n      this.forceUpdate();\n    });\n  }\n  render() {\n    let { countries, type, times, from } = this.state;\n    return (\n      <div className=\"container-fluid\">\n        <h3>COVID-19 TimeLine</h3>\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-9 col-xl-10\">\n            <CovidGraph values={countries} times={times} from={from} />\n          </div>\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-3 col-xl-2\">\n            <CovidFilter\n              countries={countries}\n              times={times}\n              type={type}\n              from={from}\n              onChangeCheck={this.onChangeCheck}\n              onChangeType={this.onChangeType}\n              onChangeFrom={this.onChangeFrom}\n              onClickReset={this.onClickReset}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Manager;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Manager from \"./Manager\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Manager />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}