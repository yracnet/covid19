{"version":3,"sources":["CovidService.js","CovidFilter.js","CovidGraph.js","Manager.js","serviceWorker.js","index.js"],"names":["String","prototype","format","i","args","arguments","this","replace","Array","last","length","config","days","timeseries","mapper","csv","split","map","it","array","labels","slice","Date","moment","add","push","forEach","name","result","filter","reduce","a","b","c","parseInt","unshift","includes","values","line","label","checked","proyections","fetchTimeLine","type","success","error","title","url","fetch","then","response","text","matrix","model","catch","CovidFilter","countries","times","from","onChangeFrom","onChangeCheck","onChangeType","onClickReset","useState","setFilter","filterCountries","toUpperCase","className","colSpan","defaultValue","onChange","value","index","key","onClick","e","currentTarget","event","colors1","colors2","CovidGraph","start","indexOf","data","datasets","fill","borderColor","backgroundColor","averange","end","createLinealProyections","borderDash","Manager","props","state","bind","reloadGraph","element","setState","console","log","forceUpdate","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f43bdc62.chunk.js","sourcesContent":["import moment from \"moment\";\n\nString.prototype.format = function() {\n  var i = 0,\n    args = arguments;\n  return this.replace(/{}/g, function() {\n    return typeof args[i] != \"undefined\" ? args[i++] : \"\";\n  });\n};\nArray.prototype.last = function() {\n  return this[this.length - 1];\n};\n\nconst config = {\n  days: 8,\n  timeseries:\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_{}_global.csv\"\n};\n\nconst mapper = {\n  csvToMatrix: function(csv) {\n    return csv.split(\"\\n\").map(it => it.split(\",\"));\n  },\n  matrixToModel: function(array) {\n    let labels = array[0]\n      .slice(4)\n      .map(it => new Date(it))\n      .map(it => moment(it))\n      .map(it => it.format(\"YYYY-MM-DD\"));\n    let last = moment(new Date(array[0].last()));\n    for (let i = 0; i < config.days; i++) {\n      last = last.add(1, \"days\");\n      labels.push(last.format(\"YYYY-MM-DD\"));\n    }\n    array = array.slice(1);\n\n    // grupo US y CHINA\n    [\"China\", \"US\"].forEach(name => {\n      let result = array\n        .filter(it => it[1] === name)\n        .reduce((a, b) => {\n          let c = [...b];\n          if (a.length === 0) {\n            return c;\n          }\n          c[0] = \"SUMATORIA\";\n          for (let i = 4; i < b.length; i++) {\n            c[i] = parseInt(c[i]) + parseInt(a[i]);\n          }\n          return c;\n        }, []);\n      array.unshift(result);\n    });\n    //grupo UE\n\n    let result = array\n      .filter(it =>\n        [\n          \"Spain\",\n          \"France\",\n          \"Italy\",\n          \"Germany\",\n          \"Portugal\",\n          \"Austria\",\n          \"Belgium\",\n          \"Netherlands\"\n        ].includes(it[1])\n      )\n      .reduce((a, b) => {\n        let c = [...b];\n        if (a.length === 0) {\n          return c;\n        }\n        c[1] = \"UE - Parcial\";\n        c[0] = \"SUMATORIA\";\n        for (let i = 4; i < b.length; i++) {\n          c[i] = parseInt(c[i]) + parseInt(a[i]);\n        }\n        return c;\n      }, []);\n    array.unshift(result);\n\n    let values = array.map(line => ({\n      label: line[1] + (line[0] ? \" / \" + line[0] : \"\"),\n      checked: false,\n      last: line.last(),\n      values: line.slice(4).map(it => parseInt(it)),\n      proyections: []\n    }));\n\n    return {\n      labels,\n      values\n    };\n  }\n};\n\nlet fetchTimeLine = function(type, success, error) {\n  success = success ? success : () => {};\n  error = error ? error : () => {};\n  let result = {\n    title: \"TimeLine for \" + type,\n    url: config.timeseries.format(type)\n  };\n  fetch(result.url)\n    .then(response => response.text())\n    .then(text => mapper.csvToMatrix(text))\n    .then(matrix => mapper.matrixToModel(matrix))\n    .then(model => {\n      return { ...result, ...model };\n    })\n    .then(success)\n    .catch(error);\n};\n\nlet createLinealProyections = function(values) {\n  let result = values.map(it => it);\n  let init = result.length - config.days;\n  let averange = 0;\n  for (let i = init; i < result.length; i++) {\n    let diff = result[i] - result[i - 1];\n    averange = averange + diff;\n  }\n  averange = averange / config.days;\n  let end = result.length + config.days;\n  for (let i = result.length; i < end; i++) {\n    result[i] = result[i - 1] + averange;\n  }\n  return result;\n};\nexport { fetchTimeLine, createLinealProyections };\n","import React, { useState } from \"react\";\n\nfunction CovidFilter({\n  countries,\n  times,\n  type,\n  from,\n  onChangeFrom,\n  onChangeCheck,\n  onChangeType,\n  onClickReset\n}) {\n  let [filter, setFilter] = useState(\"\");\n  let onChangeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n  let filterCountries = countries || [];\n  if (filter) {\n    filterCountries = filterCountries.filter(it => {\n      let label = it.label || \"\";\n      label = label.toUpperCase();\n      return label.includes(filter.toUpperCase());\n    });\n  }\n\n  return (\n    <div className=\"list-group\">\n      <table className=\"table table-responsive table-sm\">\n        <thead>\n          <tr>\n            <th>Mode</th>\n            <th colSpan=\"2\">\n              <select\n                name=\"type\"\n                className=\"form-control form-control-sm\"\n                defaultValue={type}\n                onChange={onChangeType}\n              >\n                <option value=\"confirmed\">Confirmed</option>\n                <option value=\"deaths\">Deaths</option>\n              </select>\n            </th>\n          </tr>\n          <tr>\n            <th>From</th>\n            <th colSpan=\"2\">\n              <div className=\"input-group\">\n                <select\n                  name=\"type\"\n                  className=\"form-control form-control-sm\"\n                  value={from}\n                  onChange={onChangeFrom}\n                >\n                  {times.map((it, index) => (\n                    <option key={index} value={it}>\n                      {it}\n                    </option>\n                  ))}\n                </select>\n                <div className=\"input-group-append\">\n                  <button\n                    className=\"btn btn-sm btn-danger\"\n                    type=\"button\"\n                    onClick={e => {\n                      e.currentTarget.value = times[0];\n                      onChangeFrom(e);\n                    }}\n                  >\n                    Clear\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n          <tr>\n            <th>View</th>\n            <th colSpan=\"2\">\n              <div className=\"input-group\">\n                <input\n                  name=\"filter\"\n                  className=\"form-control form-control-sm\"\n                  type=\"text\"\n                  defaultValue={filter}\n                  onChange={onChangeFilter}\n                />\n                <div className=\"input-group-append\">\n                  <button\n                    className=\"btn btn-sm btn-danger\"\n                    type=\"button\"\n                    onClick={onClickReset}\n                  >\n                    Clear\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {filterCountries.map((it, index) => (\n            <tr key={index}>\n              <th>\n                <input\n                  name={it.label}\n                  type=\"checkbox\"\n                  checked={it.checked}\n                  onChange={onChangeCheck}\n                />\n              </th>\n              <td>{it.label}</td>\n              <td>\n                <span className=\"badge badge-danger\">{it.last}</span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default CovidFilter;\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { createLinealProyections } from \"./CovidService\";\n//const data = {\n//  labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n//  datasets: [\n//    {\n//      label: \"My First dataset\",\n//      fill: false,\n//      lineTension: 0.1,\n//      backgroundColor: \"rgba(75,192,192,0.4)\",\n//      borderColor: \"rgba(75,192,192,1)\",\n//      borderCapStyle: \"butt\",\n//      borderDash: [],\n//      borderDashOffset: 0.0,\n//      borderJoinStyle: \"miter\",\n//      pointBorderColor: \"rgba(75,192,192,1)\",\n//      pointBackgroundColor: \"#fff\",\n//      pointBorderWidth: 1,\n//      pointHoverRadius: 5,\n//      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n//      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n//      pointHoverBorderWidth: 2,\n//      pointRadius: 1,\n//      pointHitRadius: 10,\n//      data: [65, 59, 80, 81, 56, 55, 40]\n//    }\n//  ]\n//};\nconst colors1 = [\n  \"#FF6384\",\n  \"#36A2EB\",\n  \"#FFCE56\",\n  \"#fdfd98\",\n  \"#85a8ba\",\n  \"#eee0c9\",\n  \"#f1f0e8\",\n  \"#b29dd9\",\n  \"#fe6b64\"\n];\n\nconst colors2 = [\n  \"#77dd77\",\n  \"#779ecb\",\n  \"#90c978\",\n  \"#83c6dd\",\n  \"#5db1d1\",\n  \"#98e690\",\n  \"#ebceed\",\n  \"#afd5aa\",\n  \"#d9ffff\"\n];\n\nfunction CovidGraph({ values, times, from }) {\n  let start = 0;\n  if (from) {\n    start = times.indexOf(from);\n  }\n\n  let data = {\n    labels: times.slice(start)\n  };\n  data.datasets = values\n    .filter(it => it.checked)\n    .map((it, i) => ({\n      label: it.label,\n      data: it.values.slice(start),\n      fill: false,\n      borderColor: colors1[i % colors1.length],\n      backgroundColor: colors1[i % colors1.length]\n    }));\n  values\n    .filter(it => it.checked)\n    .filter(it => it.proyections)\n    .map((it, i) => {\n      if (it.proyections.length === 0) {\n        it.proyections = createLinealProyections(it.values);\n      }\n      return it;\n    })\n    .map((it, i) => ({\n      label: it.label + \" Lineal Proyection\",\n      data: it.proyections.slice(start),\n      fill: false,\n      borderDash: [10, 5],\n      borderColor: colors2[i % colors2.length],\n      backgroundColor: colors2[i % colors2.length]\n    }))\n    .forEach(it => {\n      data.datasets.push(it);\n    });\n  return (\n    <div>\n      <Line data={data} />\n    </div>\n  );\n}\n\nexport default CovidGraph;\n","import React from \"react\";\nimport { fetchTimeLine } from \"./CovidService\";\nimport CovidFilter from \"./CovidFilter\";\nimport CovidGraph from \"./CovidGraph\";\nimport \"./Manager.scss\";\n\nclass Manager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: \"confirmed\",\n      from: \"2020-01-01\",\n      times: [\"01\", \"02\", \"03\", \"04\", \"05\"],\n      countries: [\n        {\n          label: \"line 1\",\n          checked: true,\n          values: [5, 15, 2, 30, 5],\n          proyections: [0, 0, 10, 20, 30]\n        },\n        {\n          label: \"line 2\",\n          checked: true,\n          values: [50, 5, 20, 30, 50],\n          proyections: [0, 0, 10, 20, 30]\n        }\n      ]\n    };\n    this.onChangeCheck = this.onChangeCheck.bind(this);\n    this.onChangeFrom = this.onChangeFrom.bind(this);\n    this.onChangeType = this.onChangeType.bind(this);\n    this.onClickReset = this.onClickReset.bind(this);\n    this.reloadGraph = this.reloadGraph.bind(this);\n  }\n\n  onChangeCheck(event) {\n    let { countries } = this.state;\n    let element = event.currentTarget;\n    countries\n      .filter(it => it.label === element.name)\n      .forEach(it => (it.checked = element.checked));\n    this.setState({ countries });\n  }\n\n  onChangeType(event) {\n    let type = event.currentTarget.value;\n    this.setState({ type });\n    this.reloadGraph();\n  }\n\n  onChangeFrom(event) {\n    let from = event.currentTarget.value;\n    this.setState({ from });\n  }\n\n  onClickReset() {\n    let { countries } = this.state;\n    countries.forEach(it => {\n      it.checked = false;\n    });\n    this.setState({ countries });\n  }\n  componentDidMount() {\n    let state = this.state;\n    fetchTimeLine(state.type, data => {\n      state.times = data.labels;\n      state.countries = data.values;\n      state.from = \"2020-03-10\";\n      state.countries\n        .filter(it => it.label === \"Bolivia\")\n        .forEach(it => {\n          it.checked = true;\n        });\n      console.log(\"-->\", state);\n      this.setState(state);\n    });\n  }\n  componentDidUpdate() {}\n  reloadGraph() {\n    let state = this.state;\n    fetchTimeLine(state.type, data => {\n      state.times = data.labels;\n      state.countries = data.values;\n      this.setState(state);\n      this.forceUpdate();\n    });\n  }\n  render() {\n    let { countries, type, times, from } = this.state;\n    return (\n      <div className=\"container-fluid\">\n        <h3>COVID-19 TimeLine</h3>\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-9 col-xl-10\">\n            <CovidGraph values={countries} times={times} from={from} />\n          </div>\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-3 col-xl-2\">\n            <CovidFilter\n              countries={countries}\n              times={times}\n              type={type}\n              from={from}\n              onChangeCheck={this.onChangeCheck}\n              onChangeType={this.onChangeType}\n              onChangeFrom={this.onChangeFrom}\n              onClickReset={this.onClickReset}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Manager;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Manager from \"./Manager\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Manager />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}