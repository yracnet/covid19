{"version":3,"sources":["CovidService.js","CovidFilter.js","CovidGraph.js","Manager.js","serviceWorker.js","index.js"],"names":["String","prototype","format","i","args","arguments","this","replace","Array","last","index","length","config","before","after","timeseries","mapper","csv","split","map","it","array","labels","slice","Date","moment","add","push","forEach","name","result","filter","reduce","a","b","c","parseInt","unshift","includes","values","line","label","checked","proyections","fetchTimeLine","type","success","error","e","console","warn","title","url","fetch","then","response","text","matrix","model","catch","createWeekRegression","init","averange","undefined","point","createRegression","fnRegression","log","x","xx","yy","regression","predict","createLinearRegression","ML","window","xML","SimpleLinearRegression","createExponentialRegression","findIndex","ExponentialRegression","CovidFilter","countries","times","onChangeConfig","onChangeCheck","onClickReset","useState","setFilter","filterCountries","toUpperCase","className","colSpan","defaultValue","onChange","value","from","key","onClick","currentTarget","to","event","colors","attr","fnList","start","end","sw","data","fill","pointRadius","borderDash","borderWidth","borderColor","backgroundColor","CovidGraph","indexOf","datasets","Manager","props","state","bind","reloadGraph","setState","element","forceUpdate","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c2d43338.chunk.js","sourcesContent":["import moment from \"moment\";\n\nString.prototype.format = function() {\n  var i = 0,\n    args = arguments;\n  return this.replace(/{}/g, function() {\n    return typeof args[i] != \"undefined\" ? args[i++] : \"\";\n  });\n};\nArray.prototype.last = function(index = 1) {\n  return this[this.length - index];\n};\n\nconst config = {\n  before: 5,\n  after: 25,\n  timeseries:\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_{}_global.csv\"\n};\n\nconst mapper = {\n  csvToMatrix: function(csv) {\n    return csv.split(\"\\n\").map(it => it.split(\",\"));\n  },\n  matrixToModel: function(array) {\n    let labels = array[0]\n      .slice(4)\n      .map(it => new Date(it))\n      .map(it => moment(it))\n      .map(it => it.format(\"YYYY-MM-DD\"));\n    let last = moment(new Date(array[0].last()));\n    for (let i = 0; i < config.after; i++) {\n      last = last.add(1, \"days\");\n      labels.push(last.format(\"YYYY-MM-DD\"));\n    }\n    array = array.slice(1);\n\n    // grupo US y CHINA\n    [\"China\", \"US\"].forEach(name => {\n      let result = array\n        .filter(it => it[1] === name)\n        .reduce((a, b) => {\n          let c = [...b];\n          c[0] = \"SUMATORIA\";\n          if (a.length === 0) {\n            return c;\n          }\n          for (let i = 4; i < b.length; i++) {\n            c[i] = parseInt(c[i]) + parseInt(a[i]);\n          }\n          return c;\n        }, []);\n      array.unshift(result);\n    });\n    //grupo UE\n\n    let result = array\n      .filter(it =>\n        [\n          \"Spain\",\n          \"France\",\n          \"Italy\",\n          \"Germany\",\n          \"Portugal\",\n          \"Austria\",\n          \"Belgium\",\n          \"Netherlands\"\n        ].includes(it[1])\n      )\n      .reduce((a, b) => {\n        let c = [...b];\n        if (a.length === 0) {\n          return c;\n        }\n        c[1] = \"UE - Parcial\";\n        c[0] = \"SUMATORIA\";\n        for (let i = 4; i < b.length; i++) {\n          c[i] = parseInt(c[i]) + parseInt(a[i]);\n        }\n        return c;\n      }, []);\n    array.unshift(result);\n\n    let values = array.map(line => ({\n      label: line[1] + (line[0] ? \" / \" + line[0] : \"\"),\n      checked: false,\n      last: line.last(),\n      values: line.slice(4).map(it => parseInt(it)),\n      proyections: []\n    }));\n\n    return {\n      labels,\n      values\n    };\n  }\n};\n\nlet fetchTimeLine = function(type, success, error) {\n  success = success ? success : () => {};\n  error = error\n    ? error\n    : e => {\n        console.warn(\"Error:\", e);\n      };\n  let result = {\n    title: \"TimeLine for \" + type,\n    url: config.timeseries.format(type)\n  };\n  fetch(result.url)\n    .then(response => response.text())\n    .then(text => mapper.csvToMatrix(text))\n    .then(matrix => mapper.matrixToModel(matrix))\n    .then(model => {\n      return { ...result, ...model };\n    })\n    .then(success)\n    .catch(error);\n};\n\nlet createWeekRegression = function(values) {\n  let result = values.map(it => it);\n  let init = result.length - config.before;\n  let averange = 0;\n  for (let i = init; i < result.length; i++) {\n    let diff = result[i] - result[i - 1];\n    averange = averange + diff;\n  }\n  averange = averange / config.before;\n  for (let i = 0; i < init; i++) {\n    result[i] = undefined;\n  }\n  let point = values.last();\n  let index = result.length - 1;\n  for (let i = 0; i < config.after; i++) {\n    result[index - i] = point - averange * i;\n    result[index + i] = point + averange * i;\n  }\n  return result;\n};\n\nlet createRegression = function(values, init, fnRegression) {\n  let length = values.length;\n  console.log(\"=\", init, length, fnRegression);\n  let x = 0;\n  let xx = [];\n  let yy = [];\n  for (var i = init; i < length; ++i) {\n    xx.push(x++);\n    yy.push(values[i]);\n  }\n  const regression = new fnRegression(xx, yy);\n  let result = values.map(it => it);\n  let index = result.length - 1;\n  for (let i = 0; i < init; i++) {\n    result[i] = undefined;\n  }\n  for (let i = 0; i < config.after; i++) {\n    result[index + i] = regression.predict(x + i);\n    result[index - i] = regression.predict(x - i);\n  }\n  return result;\n};\n\nlet createLinearRegression = function(values) {\n  let ML = window.xML;\n  let init = values.length - config.before;\n  //let init = values.findIndex(it => it > 0);\n  return createRegression(values, init, ML.SimpleLinearRegression);\n};\n\nlet createExponentialRegression = function(values) {\n  let ML = window.xML;\n  let init = values.findIndex(it => it > 0);\n  return createRegression(values, init, ML.ExponentialRegression);\n};\nexport {\n  fetchTimeLine,\n  createWeekRegression,\n  createLinearRegression,\n  createExponentialRegression\n};\n","import React, { useState } from \"react\";\n\nfunction CovidFilter({\n  countries,\n  times,\n  config,\n  onChangeConfig,\n  onChangeCheck,\n  onClickReset\n}) {\n  let [filter, setFilter] = useState(\"\");\n  let onChangeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n  let filterCountries = countries || [];\n  if (filter) {\n    filterCountries = filterCountries.filter(it => {\n      let label = it.label || \"\";\n      label = label.toUpperCase();\n      return label.includes(filter.toUpperCase());\n    });\n  }\n\n  return (\n    <div className=\"list-group\">\n      <table className=\"table table-responsive table-sm\">\n        <thead>\n          <tr>\n            <th>Mode</th>\n            <th colSpan=\"2\">\n              <select\n                name=\"type\"\n                className=\"form-control form-control-sm\"\n                defaultValue={config.type}\n                onChange={onChangeConfig}\n              >\n                <option value=\"confirmed\">Confirmed</option>\n                <option value=\"deaths\">Deaths</option>\n              </select>\n            </th>\n          </tr>\n          <tr>\n            <th>From</th>\n            <th colSpan=\"2\">\n              <div className=\"input-group\">\n                <select\n                  name=\"from\"\n                  className=\"form-control form-control-sm\"\n                  value={config.from}\n                  onChange={onChangeConfig}\n                >\n                  {times.map((it, index) => (\n                    <option key={index} value={it}>\n                      {it}\n                    </option>\n                  ))}\n                </select>\n                <div className=\"input-group-append\">\n                  <button\n                    name=\"from\"\n                    className=\"btn btn-sm btn-danger\"\n                    type=\"button\"\n                    onClick={e => {\n                      e.currentTarget.value = times[0];\n                      onChangeConfig(e);\n                    }}\n                  >\n                    Clear\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n          <tr>\n            <th>To</th>\n            <th colSpan=\"2\">\n              <div className=\"input-group\">\n                <select\n                  name=\"to\"\n                  className=\"form-control form-control-sm\"\n                  value={config.to}\n                  onChange={onChangeConfig}\n                >\n                  {times.map((it, index) => (\n                    <option key={index} value={it}>\n                      {it}\n                    </option>\n                  ))}\n                </select>\n                <div className=\"input-group-append\">\n                  <button\n                    name=\"to\"\n                    className=\"btn btn-sm btn-danger\"\n                    type=\"button\"\n                    onClick={e => {\n                      e.currentTarget.value = times.last();\n                      onChangeConfig(e);\n                    }}\n                  >\n                    Clear\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n          <tr>\n            <th>View</th>\n            <th colSpan=\"2\">\n              <div className=\"input-group\">\n                <input\n                  name=\"filter\"\n                  className=\"form-control form-control-sm\"\n                  type=\"text\"\n                  defaultValue={filter}\n                  onChange={onChangeFilter}\n                />\n                <div className=\"input-group-append\">\n                  <button\n                    className=\"btn btn-sm btn-danger\"\n                    type=\"button\"\n                    onClick={onClickReset}\n                  >\n                    Clear\n                  </button>\n                </div>\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {filterCountries.map((it, index) => (\n            <tr key={index}>\n              <th>\n                <input\n                  name={it.label}\n                  type=\"checkbox\"\n                  checked={it.checked}\n                  onChange={onChangeCheck}\n                />\n              </th>\n              <td>{it.label}</td>\n              <td>\n                <span className=\"badge badge-danger\">{it.last}</span>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default CovidFilter;\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  createWeekRegression,\n  createLinearRegression,\n  createExponentialRegression\n} from \"./CovidService\";\n//const data = {\n//  labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n//  datasets: [\n//    {\n//      label: \"My First dataset\",\n//      fill: false,\n//      lineTension: 0.1,\n//      backgroundColor: \"rgba(75,192,192,0.4)\",\n//      borderColor: \"rgba(75,192,192,1)\",\n//      borderCapStyle: \"butt\",\n//      borderDash: [],\n//      borderDashOffset: 0.0,\n//      borderJoinStyle: \"miter\",\n//      pointBorderColor: \"rgba(75,192,192,1)\",\n//      pointBackgroundColor: \"#fff\",\n//      pointBorderWidth: 1,\n//      pointHoverRadius: 5,\n//      pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n//      pointHoverBorderColor: \"rgba(220,220,220,1)\",\n//      pointHoverBorderWidth: 2,\n//      pointRadius: 1,\n//      pointHitRadius: 10,\n//      data: [65, 59, 80, 81, 56, 55, 40]\n//    }\n//  ]\n//};\nconst colors = [\n  \"#FF6384\",\n  \"#36A2EB\",\n  \"#FFCE56\",\n  \"#b29dd9\",\n  \"#85a8ba\",\n  \"#ff0000\",\n  \"#00ff00\",\n  \"#0000ff\",\n  \"#fe6b64\"\n];\n\nlet mapper = {\n  createNewList: function(it, attr, fnList) {\n    if (!it[attr] || it[attr].length === 0) {\n      it[attr] = fnList(it.values);\n    }\n    return it;\n  },\n  createDataset: function(title, it, i, attr, start, end) {\n    let values = it[attr];\n    if (!values) {\n      values = [];\n    }\n    if (values.slice) {\n      values = values.slice(start, end);\n    }\n    let sw = title && title.includes(\"-\");\n    return {\n      label: it.label + title,\n      data: values,\n      fill: false,\n      pointRadius: sw ? 1 : 3,\n      borderDash: sw ? [5, 5] : [],\n      borderWidth: sw ? 2 : 3,\n      borderColor: colors[i % colors.length],\n      backgroundColor: colors[i % colors.length]\n    };\n  },\n  slice: function(it, start) {\n    return {\n      ...it,\n      values: it.values.slice(start)\n    };\n  }\n};\n\nfunction CovidGraph({ values, times, from, to }) {\n  let start = 0;\n  let end = values.length;\n  if (from) {\n    start = times.indexOf(from);\n  }\n  if (to) {\n    end = times.indexOf(to);\n  }\n  console.log(\"-->\", times, start, end);\n\n  let data = {\n    labels: times.slice(start, end),\n    datasets: []\n  };\n  values\n    .filter(it => it.checked)\n    .map(it => {\n      it = mapper.createNewList(it, \"linear\", createWeekRegression);\n      it = mapper.createNewList(it, \"linearA\", createLinearRegression);\n      it = mapper.createNewList(it, \"linearB\", createExponentialRegression);\n      return it;\n    })\n    .forEach((it, i) => {\n      data.datasets.push(mapper.createDataset(\"\", it, i, \"values\", start, end));\n      data.datasets.push(\n        mapper.createDataset(\"-Week\", it, 10 + i, \"linear\", start, end)\n      );\n      data.datasets.push(\n        mapper.createDataset(\"-Linear\", it, 20 + i, \"linearA\", start, end)\n      );\n      data.datasets.push(\n        mapper.createDataset(\"-Exponential\", it, 30 + i, \"linearB\", start, end)\n      );\n    });\n  return (\n    <div>\n      <Line data={data} />\n    </div>\n  );\n}\n\nexport default CovidGraph;\n","import React from \"react\";\nimport { fetchTimeLine } from \"./CovidService\";\nimport CovidFilter from \"./CovidFilter\";\nimport CovidGraph from \"./CovidGraph\";\nimport \"./Manager.scss\";\n\nclass Manager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      config: {\n        type: \"confirmed\",\n        from: \"2020-01-01\",\n        to: \"2020-03-30\"\n      },\n      times: [\"01\", \"02\", \"03\", \"04\", \"05\"],\n      countries: [\n        {\n          label: \"line 1\",\n          checked: true,\n          values: [5, 15, 2, 30, 5],\n          proyections: [0, 0, 10, 20, 30]\n        },\n        {\n          label: \"line 2\",\n          checked: true,\n          values: [50, 5, 20, 30, 50],\n          proyections: [0, 0, 10, 20, 30]\n        }\n      ]\n    };\n    this.onChangeCheck = this.onChangeCheck.bind(this);\n    this.onChangeConfig = this.onChangeConfig.bind(this);\n    this.onClickReset = this.onClickReset.bind(this);\n    this.reloadGraph = this.reloadGraph.bind(this);\n  }\n\n  onChangeConfig(event) {\n    let { value, name } = event.currentTarget;\n    let { config } = this.state;\n    config[name] = value;\n    this.setState({ config });\n    console.log(\"config\", config);\n    if (name === \"type\") {\n      this.reloadGraph();\n    }\n  }\n\n  onChangeCheck(event) {\n    let { countries } = this.state;\n    let element = event.currentTarget;\n    countries\n      .filter(it => it.label === element.name)\n      .forEach(it => (it.checked = element.checked));\n    this.setState({ countries });\n  }\n\n  onClickReset() {\n    let { countries } = this.state;\n    countries.forEach(it => {\n      it.checked = false;\n    });\n    this.setState({ countries });\n  }\n  componentDidMount() {\n    let state = this.state;\n    fetchTimeLine(state.config.type, data => {\n      state.times = data.labels;\n      state.countries = data.values;\n      state.config.from = \"2020-03-10\";\n      state.config.to = state.times.last(22);\n      state.countries\n        .filter(it => it.label === \"Bolivia\")\n        .forEach(it => {\n          it.checked = true;\n        });\n      console.log(\"-->\", state);\n      this.setState(state);\n    });\n  }\n  componentDidUpdate() {}\n  reloadGraph() {\n    let state = this.state;\n    fetchTimeLine(state.config.type, data => {\n      state.times = data.labels;\n      state.countries = data.values;\n      this.setState(state);\n      this.forceUpdate();\n    });\n  }\n  render() {\n    let { countries, config, times } = this.state;\n    return (\n      <div className=\"container-fluid\">\n        <h3>COVID-19 TimeLine</h3>\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-9 col-xl-10\">\n            <CovidGraph\n              values={countries}\n              times={times}\n              from={config.from}\n              to={config.to}\n            />\n          </div>\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-3 col-xl-2\">\n            <CovidFilter\n              countries={countries}\n              times={times}\n              config={config}\n              onChangeConfig={this.onChangeConfig}\n              onChangeCheck={this.onChangeCheck}\n              onClickReset={this.onClickReset}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Manager;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Manager from \"./Manager\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Manager />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}